server
{
	listen 8082;
    access_log  /usr/local/openresty/nginx/logs/access.log;
	location / 
	{
        root /home/boss/Desktop/example;
		index index.html;
	}
}

#Reverse proxy test server

server
{
    listen 8083;
    access_log  /usr/local/openresty/nginx/logs/access.log;
    location /
    {
        proxy_pass http://localhost:8081;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

server
{
    listen 8084;
    access_log /usr/local/openresty/nginx/logs/access.log;
    location /
    {
        default_type text/html;
        content_by_lua_file /usr/local/openresty/nginx/sites-available/test.lua;
        
        #content_by_lua 
        #'
        #    ngx.say("hello")
        #';

    }
}


# Postgres

server {
        listen 8085;
        default_type text/html;
        location / {
            postgres_pass   database;
            postgres_query  "CREATE TABLE Person(PersonID int)";
            #postgres_query  "SELECT * FROM Persons";
        }
        location /select 
        {
            postgres_pass database;
            rds_json on;
            postgres_output value;
            postgres_set $result 0 0;
            postgres_query "SELECT PersonID FROM Person where PersonID=1";
            echo $result;
        }
        location /insert
        {
            default_type text/html;
            postgres_pass database;
            postgres_query "INSERT INTO Person (PersonID) VALUES (1)";
            postgres_output text;
        }
}

#MYSQL

server
{
    listen 8086;

    location /select
    {
        default_type text/html;
        rds_json_root rows;
        content_by_lua '
                
            local mysql = require "resty.mysql"
            local db, err = mysql:new()
                
            if not db then
                ngx.say("failed to instantiate mysql: ", err)
                return
            end

            db:set_timeout(1000) -- 1 sec

            local ok, err, errcode, sqlstate = db:connect{
               host = "127.0.0.1",
               port = 3306,
               database = "teste",
               user = "root",
               password = "root",
               max_packet_size = 1024 * 1024 
            }

            if not ok then
                ngx.say("failed to connect: ", err, ": ", errcode, " ", sqlstate)
                return
            end

            --ngx.say("connected to mysql.")

            res, err, errcode, sqlstate = db:query("select name from cats order by id asc", 1)

            if not res then
                ngx.say("bad result: ", err, ": ", errcode, ": ", sqlstate, ".")
                return
            end

            local cjson = require "cjson"
            local abacaxo = cjson.encode(res)

            ngx.say(abacaxo.length)
            --ngx.say("result: ", cjson.encode(res))

        ';
    }
}