
server
{
    listen 8084;
    access_log /usr/local/openresty/nginx/logs/access.log;
    location /
    {
        default_type text/html;
        content_by_lua
        '
            a = io.popen("pwd")
            --ngx.say(a)
        ';
        #content_by_lua_file /usr/local/openresty/nginx/sites-available/test.lua;
    }
}

#MYSQLs

server
{
    listen 8086;
    location ~* /(\w+)$
    {
        default_type text/html;
        rds_json_root rows;
        set $USER $1;

        content_by_lua '

            local cjson = require "cjson"    
            local mysql = require "resty.mysql"
            local db, err = mysql:new()
            local user_id = ngx.var.USER -- Grabs the user name from the URL
            local che_port = 8090 --Default port for che

            if not db then
                ngx.say("failed to instantiate mysql: ", err)
                return
            end

            db:set_timeout(1000) -- 1 sec

            local ok, err, errcode, sqlstate = db:connect{
               host = "127.0.0.1",
               port = 3306,
               database = "nginx",
               user = "root",
               password = "root",
               max_packet_size = 1024 * 1024 
            }

            if not ok then
                ngx.log(ngx.ERR,"failed to connect: ", err, ": ", errcode, " ", sqlstate)
                return
            end

            ngx.say("connected to mysql.")

            --Checks if the table is empty

            res, err, errcode, sqlstate = db:query("show table status")

            nRows = tonumber(res[1].Rows)

            --If the table is empty
            if nRows == 0 then
                res, err, errcode, sqlstate = db:query("insert into Containers (Registration_ID,Container_Port) values (\'" ..user_id.. "\',8090)")
                    
                ngx.say("Insertion was successfull")
                return

            else

                -- Searches in the database for a row indicating the existence of a container belonging to the user. --   It uses the parameter in the url as a key in the search, matching it with registration_id.

                res, err, errcode, sqlstate = db:query("select * from Containers where Registration_ID=\'" .. user_id .."\'")

                -- Query result equals to zero, that indicates that a container belonging to the user does not exist
                if #res == 0 then
                                
                    ngx.log(ngx.ERR, "Segunda mensagem")
                    -- A row was found in the table, so users already exist 
                    -- So it does the following:
                    -- 1 - Obtain the biggest port value
                    -- 2 - Increase it by one and store it on the variable che_port
                    -- 3 - Use it as port value for the container belonging to the user attempting to use the service.

                    res, err, errcode, sqlstate = db:query("insert into Containers (Registration_ID) values (\'" ..user_id.. "\')")
                    return
                else

                end
            end
        ';
    }
}