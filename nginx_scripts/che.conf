
server
{
    listen 8085;
    set $IP "";
    location /
    {
        default_type text/html;
        rewrite_by_lua
        '
            local shell = require("resty.shell")
            local args = 
            {
                socket = "unix:/tmp/nginx.sock",
            }
            local status, out, err = shell.execute("./usr/local/openresty/nginx/lib/bash_scripts/che_helper_functions.sh getIP", args)
            ngx.header.content_type = "text/plain"
            ngx.var.IP = out
        ';
        echo $IP;
       
    }
}
server
{
    listen 8086;
    set $PORT "";
    set $IP "";
    location ~* /(\w+)$
    {
        default_type text/html;
        rds_json_root rows;
        set $USER $1;

        rewrite_by_lua '
            
            local shell = require("resty.shell")
            local args = 
            {
                socket = "unix:/tmp/nginx.sock",
            }
            local db = require "helper" --Helper lua file which is respons for database operations
            local user_id = ngx.var.USER -- Grabs the user name from the URL
            
            local status, out, err = shell.execute("./usr/local/openresty/nginx/lib/bash_scripts/che_helper_functions.sh getIP", args)
            ngx.header.content_type = "text/plain"
            ngx.var.IP = out
            
            --Initiates a connection to the database and sets the user variable on the helper file
            db.new(user_id)

            --Checks if the table is empty

            nRows = db.getNrows()

            --If the table is empty
            if nRows == 0 then
                db.insert("Containers","Registration_ID",user_id)
                
                res = db.search("Containers","Container_Port","Registration_ID",user_id)

                che_port = res[1].Container_Port

            else

                -- Searches in the database for a row indicating the existence of a container belonging to the user. --   It uses the parameter in the url as a key in the search, matching it with registration_id.

                res = db.search("Containers","*","Registration_ID",user_id)

                -- Query result equals to zero, that indicates that a container belonging to the user does not exist
                if #res == 0 then
                    
                    -- A row was found in the table, so users already exist 
                    -- So it does the following:
                    -- 1 - Obtain the biggest port value
                    -- 2 - Increase it by one and store it on the variable che_port
                    -- 3 - Use it as port value for the container belonging to the user attempting to use the service.

                    db.insert("Containers","Registration_ID",user_id)

                    res = db.search("Containers","Container_Port","Registration_ID",user_id)

                    che_port = res[1].Container_Port
                    
                else    
                    che_port = res[1].Container_Port
                end                
            end
            local status, out, err = shell.execute("./usr/local/openresty/nginx/lib/bash_scripts/che_helper_functions.sh start "..user_id.." "..che_port, args)
            ngx.var.PORT = che_port;
        ';
        echo_blocking_sleep 600;
        echo "Testee porra";
        proxy_connect_timeout       300;
        proxy_send_timeout          300;
        proxy_read_timeout          300;
        send_timeout                300;
        proxy_pass http://192.168.25.10:$PORT;
    }
}
